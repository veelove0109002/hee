name: Build luci-app-uninstall IPKs

on:
  push:
    branches: [ main, master ]
    paths:
      - 'luci-app-uninstall/**'
      - '.github/workflows/build.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'luci-app-uninstall/**'
      - '.github/workflows/build.yml'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: SDK ${{ matrix.release }} / ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        release: [ '23.05.3' ]
        include:
          - target: x86/64
            short: x86_64

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare host directories
        run: |
          mkdir -p artifacts/${{ matrix.release }}/${{ matrix.short }}

      - name: Download OpenWrt SDK (auto-detect filename)
        id: dl
        run: |
          set -euxo pipefail
          BASE_URL="https://downloads.openwrt.org/releases/${{ matrix.release }}/targets/${{ matrix.target }}"
          echo "BASE_URL=$BASE_URL"
          SDK_FILE=$(curl -sS "$BASE_URL/" | grep -o 'openwrt-sdk-[^"<]*\.tar\.xz' | head -n1)
          if [ -z "$SDK_FILE" ]; then
            echo "Could not find SDK tarball at $BASE_URL" >&2
            exit 1
          fi
          echo "SDK_FILE=$SDK_FILE"
          curl -fL "$BASE_URL/$SDK_FILE" -o sdk.tar.xz
          mkdir -p sdk && tar -C sdk -xJf sdk.tar.xz
          SDK_DIR=$(find sdk -maxdepth 1 -type d -name 'openwrt-sdk-*' | head -n1)
          if [ -z "$SDK_DIR" ]; then
            echo "SDK dir not found after extraction" >&2
            exit 1
          fi
          echo "sdk_dir=$SDK_DIR" >> $GITHUB_OUTPUT

      - name: Build package with SDK
        run: |
          set -euxo pipefail
          SDK_DIR='${{ steps.dl.outputs.sdk_dir }}'
          pushd "$SDK_DIR"

          # Ensure luci feed exists (23.05 branch)
          if ! grep -qE '^src-git\s+luci\b' feeds.conf.default; then
            echo "src-git luci https://github.com/openwrt/luci.git;openwrt-23.05" >> feeds.conf.default
          fi

          ./scripts/feeds update -a
          # Install base packages and luci essentials (tolerate missing)
          ./scripts/feeds install -a || true
          ./scripts/feeds install luci-base || true

          rm -rf package/luci-app-uninstall
          cp -a "$GITHUB_WORKSPACE/luci-app-uninstall" package/
          make defconfig
          make package/luci-app-uninstall/compile -j$(nproc) V=sc || true

          mkdir -p "$GITHUB_WORKSPACE/artifacts/${{ matrix.release }}/${{ matrix.short }}"
          shopt -s nullglob globstar || true
          for d in bin/packages/*/*/{luci,packages}; do
            cp -v "$d"/luci-app-uninstall*.ipk "$GITHUB_WORKSPACE/artifacts/${{ matrix.release }}/${{ matrix.short }}/" 2>/dev/null || true
          done
          for d in bin/targets/**; do
            cp -v "$d"/packages/luci-app-uninstall*.ipk "$GITHUB_WORKSPACE/artifacts/${{ matrix.release }}/${{ matrix.short }}/" 2>/dev/null || true
          done
          popd

      - name: List artifacts
        run: |
          ls -al artifacts/${{ matrix.release }}/${{ matrix.short }} || true

      - name: Upload artifacts (IPKs)
        uses: actions/upload-artifact@v4
        with:
          name: luci-app-uninstall_${{ matrix.release }}_${{ matrix.short }}
          path: artifacts/${{ matrix.release }}/${{ matrix.short }}/*.ipk
          if-no-files-found: warn

      - name: Create Git tag and GitHub Release
        id: release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: luci-app-uninstall_${{ matrix.release }}_${{ matrix.short }}
          name: luci-app-uninstall SDK ${{ matrix.release }} â€¢ ${{ matrix.short }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload IPKs to Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: luci-app-uninstall_${{ matrix.release }}_${{ matrix.short }}
          files: |
            artifacts/${{ matrix.release }}/${{ matrix.short }}/*.ipk
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install makeself
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y makeself

      - name: Package .run installer
        run: |
          set -euxo pipefail
          REL='${{ matrix.release }}'
          ARCH='${{ matrix.short }}'
          ART_DIR="artifacts/${REL}/${ARCH}"
          INSTALLER_DIR="installer/${REL}/${ARCH}"
          rm -rf "$INSTALLER_DIR"
          mkdir -p "$INSTALLER_DIR"

          # Collect built ipks (handle no-match safely)
          IPK_LIST=$(find "$ART_DIR" -maxdepth 1 -type f -name '*.ipk' | sort || true)
          if [ -z "$IPK_LIST" ]; then
            echo "No IPK found in $ART_DIR, skip .run packaging." >&2
            exit 0
          fi
          while IFS= read -r f; do
            cp -v "$f" "$INSTALLER_DIR"/
          done <<EOF_LIST
          $IPK_LIST
          EOF_LIST

          # Write install script executed on target (OpenWrt)
          cat > "$INSTALLER_DIR/install.sh" << 'EOF'
          #!/usr/bin/env bash
          set -euo pipefail
          echo "== luci-app-uninstall installer =="
          if ! command -v opkg >/dev/null 2>&1; then
            echo "Error: opkg not found. Please run on OpenWrt." >&2
            exit 1
          fi
          echo "Installing packages..."
          if ! opkg install ./*.ipk; then
            echo "Retrying with --force-reinstall"
            opkg install --force-reinstall ./*.ipk
          fi
          echo "Installation finished."
          EOF
          chmod +x "$INSTALLER_DIR/install.sh"

          mkdir -p "$ART_DIR"
          RUN_NAME="luci-app-uninstall_${REL}_${ARCH}.run"
          makeself --nox11 --notemp "$INSTALLER_DIR" "${ART_DIR}/${RUN_NAME}" "luci-app-uninstall Installer (${REL}/${ARCH})" ./install.sh

      - name: List artifacts after .run
        run: |
          set -euxo pipefail
          ls -al artifacts/${{ matrix.release }}/${{ matrix.short }} || true

      - name: Upload .run installer (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: luci-app-uninstall_run_${{ matrix.release }}_${{ matrix.short }}
          path: artifacts/${{ matrix.release }}/${{ matrix.short }}/*.run
          if-no-files-found: warn

      - name: Upload .run to Release
        if: ${{ hashFiles(format('artifacts/{0}/{1}/*.run', matrix.release, matrix.short)) != '' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: luci-app-uninstall_${{ matrix.release }}_${{ matrix.short }}
          files: |
            artifacts/${{ matrix.release }}/${{ matrix.short }}/*.run
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
